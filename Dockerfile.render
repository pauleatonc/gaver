FROM python:3.11.0

# Keeps Python from generating .pyc files in the container
ENV PYTHONDONTWRITEBYTECODE=1
# Turns off buffering for easier container logging
ENV PYTHONUNBUFFERED=1

# Configurar el directorio de trabajo en el contenedor
WORKDIR /app

# Instalar dependencias de sistema necesarias para psycopg2 y producción
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    gcc \
    postgresql-client \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip
# Instala Cython
RUN pip install --no-cache-dir cython

# Copiar requirements.txt e instalar dependencias
COPY requirements.txt /app/
RUN pip3 install --no-cache-dir -r requirements.txt

# Copiar el código de la aplicación al contenedor
COPY . /app/

# Variable de entorno para apuntar a prod.py
ENV DJANGO_SETTINGS_MODULE=buildguide.settings.prod

# Crear directorio para archivos estáticos
RUN mkdir -p /app/staticfiles

# Crear script de inicio mejorado con creación de superusuario
RUN echo '#!/bin/bash\necho "=== Generando migraciones ==="\npython manage.py makemigrations\necho "=== Ejecutando migraciones ==="\npython manage.py migrate --noinput\necho "=== Creando superusuario admin ==="\npython manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(email='\''admin@admin.com'\'').exists() or User.objects.create_superuser(email='\''admin@admin.com'\'', password='\''admin'\'')"\necho "=== Recopilando archivos estáticos ==="\npython manage.py collectstatic --noinput\necho "=== Iniciando servidor ==="\ngunicorn --bind 0.0.0.0:$PORT buildguide.wsgi:application' > /app/start.sh
RUN chmod +x /app/start.sh

# Expone el puerto dinámico que Render asigna
EXPOSE $PORT

# Comando para producción usando el script de inicio
CMD ["/app/start.sh"]

